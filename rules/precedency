Expression  ->  Assignment;
Assignment  ->  (Call ".")? Identifier "=" Assignment | Logic_OR;
Logic_OR    ->  Logic_AND ("or" Logic_AND)*;
Logic_AND   ->  Ternary ("and" Ternary)*;
Ternary     ->  Equality ("?") Comparison (":") Comparison;
Equality    ->  Comparison (("!=" | "==") Comparison)*;
Comparison  ->  Term ((">" | "<" | ">=" | "<=") Term)*;
Term        ->  Factor (("+" | "-") Factor)*;
Factor      ->  Unary (("*" | "/") Factor)*;
Unary       ->  ("!" | "-") Unary | Call;
Call        ->  Primary ( "(" Argument? ")" | "." Identifier);
Primary     ->  Number | String | "true" | "false" | "null" | "(" Expression ")" | Identifier | "super" "." Identifier;
Argument    ->  Expression ("," Expression*);
Return      ->  "return" Expression? ";";

-- --
Since Recursive Descent goes down which executes primary first if primary.
If we see these rules than, multiplication and division is handles first rather than plus and minus
as Factor handles *, / and Term handles +, -

Recursive Descent parse is a top down parser because it starts from top or outermost grammar
rule and works way down into nested expression before finally reaching the leaves of the syntax tree.

-- --
Grammar Notation        Code Representation
Terminal                Code to match and consume a token
Non-Terminal            Call to that rule's function
|                       if or switch statement
* or +                  while of for loop
?                       if statement